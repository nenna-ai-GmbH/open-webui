// This file is auto-generated by @hey-api/openapi-ts

/**
 * APITaskProgressResponse
 * Response model for task progress tracking.
 */
export type ApiTaskProgressResponse = {
    /**
     * Task Id
     */
    task_id: string;
    status?: TaskStatus;
    /**
     * Progress Percentage
     */
    progress_percentage?: number;
    /**
     * Result of the file processing. Omitted if quiet=true was specified in the request.
     */
    result?: FileBaseModel | null;
    /**
     * Error Message
     */
    error_message?: string | null;
    /**
     * Pii
     * List of detected PII entities with their positions and types. Omitted if quiet=true was specified in the request.
     */
    pii?: Array<PiiEntity> | null;
};

/**
 * AsyncBinaryResponse
 * Response model for asynchronous binary file processing.
 */
export type AsyncBinaryResponse = {
    /**
     * Task Id
     * ID of the file masking processing task
     */
    task_id: string;
};

/**
 * FileBaseModel
 * Base model for file content.
 *
 * Contains the base64-encoded content of the document.
 */
export type FileBaseModel = {
    /**
     * Content Type
     * MIME type of the document (e.g., application/pdf)
     */
    content_type: string;
    /**
     * Content Base64
     * Base64-encoded content of the redacted document, ready for client-side display or download
     */
    content_base64: string;
};

/**
 * FileMaskRequest
 * Request for masking PII in document files.
 *
 * Process PDF or DOCX files to identify and mask sensitive information.
 */
export type FileMaskRequest = {
    /**
     * Configuration for PII detection and masking. If omitted, defaults to detecting ALL types.
     */
    pii_labels?: PiiLabels | null;
    /**
     * Known Entities
     * Optional list of known entities, used to correctly set ids of PII entities for unmasking.
     */
    known_entities?: Array<KnownEntity> | null;
    /**
     * Modifiers
     * Optional list of modifiers to use for masking.
     */
    modifiers?: Array<TextProcessModifier> | null;
    /**
     * Redact Images
     * Whether to redact images containing PII. When enabled, the API will analyze images for sensitive content.
     */
    redact_images?: boolean;
    /**
     * File to mask.
     */
    file: FileObject;
};

/**
 * FileMaskResponse
 * Response from a file masking operation.
 *
 * Contains the masked document file as base64-encoded content and information
 * about detected PII entities if not in quiet mode.
 */
export type FileMaskResponse = {
    /**
     * File Base64
     * Base64 encoded masked file content
     */
    file_base64: string;
    /**
     * Pii
     * List of detected PII entities with their positions and types. Omitted if quiet=true was specified in the request.
     */
    pii?: Array<PiiEntity> | null;
};

/**
 * FileObject
 * File object to mask.
 * The file should be provided as base64-encoded content.
 */
export type FileObject = {
    /**
     * File Name
     * Name of the file.
     */
    file_name: string;
    /**
     * File Content Type
     * MIME type of the file.
     */
    file_content_type: string;
    /**
     * File Content Base64
     * Base64 encoded content of the file.
     */
    file_content_base64: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * KnownEntity
 * Information about a known entity.
 */
export type KnownEntity = {
    /**
     * Id
     * Unique identifier for the known entity
     */
    id: number;
    /**
     * Label
     * Label of the known entity
     */
    label: string;
    /**
     * Name
     * Name of the known entity
     */
    name: string;
};

/**
 * MaskUpdateRequest
 * Request for updating masking on previously masked text using new modifiers.
 *
 * This endpoint takes the output from mask_text (PIIs) and applies new modifiers
 * to update the masking and the PIIs.
 */
export type MaskUpdateRequest = {
    /**
     * Text
     * Original text string that was previously uesd for PII detection
     */
    text: string;
    /**
     * Pii
     * List of PII entities from previous mask_text operation.
     */
    pii: Array<PiiEntity> | null;
    /**
     * Modifiers
     * List of new modifiers to apply for updating the masking. Only modifiers with "string-mask" or "word-mask" action and "entity" field are used.
     */
    modifiers: Array<TextProcessModifier>;
};

/**
 * MaskUpdateResponse
 * Response from a find occurrences operation.
 *
 * Contains the masked text strings and information about the found occurrences.
 */
export type MaskUpdateResponse = {
    /**
     * Text
     * Masked text string with found occurrences replaced by labels
     */
    text: string;
    /**
     * Pii
     * List of detected PII entities with their positions and types. Omitted if quiet=true was specified in the request.
     */
    pii?: Array<PiiEntity> | null;
};

/**
 * PiiEntity
 * Information about a detected PII entity.
 */
export type PiiEntity = {
    /**
     * Text
     * Original text of the PII entity
     */
    text: string;
    /**
     * Label
     * Label used for masking the entity (e.g., PERSON_1, EMAIL_2)
     */
    label: string;
    /**
     * Id
     * Unique identifier for the PII entity
     */
    id: number;
    /**
     * Type
     * Type of the PII entity (e.g., PERSON, EMAIL)
     */
    type: string;
    /**
     * Raw Text
     * Raw text of the PII entity as it appeared in the original text
     */
    raw_text: string;
    /**
     * Occurrences
     * List of occurrences of this entity in the text
     */
    occurrences: Array<PiiOccurrence>;
};

/**
 * PiiLabels
 * Configuration for PII detection and masking behavior.
 *
 * This model allows you to specify which types of sensitive information to detect
 * and which ones to ignore, giving you fine-grained control over the masking process.
 */
export type PiiLabels = {
    /**
     * Detect
     * List of PII labels to detect. Use "ALL" to detect all available PII types.
     */
    detect?: Array<string>;
    /**
     * Ignore
     * List of PII labels to ignore during detection, even if included in "detect". Useful for excluding certain types from ALL.
     */
    ignore?: Array<string> | null;
};

/**
 * PiiOccurrence
 * Information about a specific occurrence of a PII entity in text.
 */
export type PiiOccurrence = {
    /**
     * Start Idx
     * Start index of the PII entity in the text
     */
    start_idx: number;
    /**
     * End Idx
     * End index of the PII entity in the text
     */
    end_idx: number;
};

/**
 * Session
 * Information about an active masking/unmasking session.
 *
 * Sessions store the context and entity mappings necessary for consistent
 * masking and unmasking across multiple API calls.
 */
export type Session = {
    /**
     * Session Id
     * Unique identifier for the session
     */
    session_id: string;
    /**
     * Ttl
     * Time to live in format like "24h", "7d", "30m"
     */
    ttl: string;
    /**
     * Created At
     * Timestamp when the session was created
     */
    created_at: string;
    /**
     * Expires At
     * Timestamp when the session will expire
     */
    expires_at?: string | null;
};

/**
 * SessionCreate
 * Parameters for creating a new masking/unmasking session.
 *
 * Sessions maintain context between multiple API calls, allowing consistent
 * masking and unmasking of entities across different operations.
 */
export type SessionCreate = {
    /**
     * Description
     * Optional description of the session for tracking purposes.
     */
    description?: string | null;
    /**
     * Ttl
     * Time to live in format like "24h", "7d", "30m". Default is 24 hours.
     */
    ttl?: string;
};

/**
 * TaskStatus
 * Status of an asynchronous task.
 */
export type TaskStatus = 'PENDING' | 'PROCESSING' | 'SUCCESS' | 'FAILURE';

/**
 * TextMaskRequest
 * Request for masking PII in text data.
 */
export type TextMaskRequest = {
    /**
     * Configuration for PII detection and masking. If omitted, defaults to detecting ALL types.
     */
    pii_labels?: PiiLabels | null;
    /**
     * Known Entities
     * Optional list of known entities, used to correctly set ids of PII entities for unmasking.
     */
    known_entities?: Array<KnownEntity> | null;
    /**
     * Modifiers
     * Optional list of modifiers to use for masking.
     */
    modifiers?: Array<TextProcessModifier> | null;
    /**
     * Text
     * List of text strings to mask PII from
     */
    text: Array<string>;
};

/**
 * TextMaskResponse
 * Response from a text masking operation.
 *
 * Contains the masked text strings and information about the detected
 * PII entities if not in quiet mode.
 */
export type TextMaskResponse = {
    /**
     * Text
     * List of masked text strings
     */
    text: Array<string>;
    /**
     * Pii
     * List of detected PII entities with their positions and types. Omitted if quiet=true was specified in the request.
     */
    pii?: Array<Array<PiiEntity>> | null;
    /**
     * Session information if a new session was created via the create_session parameter.
     */
    session?: Session | null;
};

/**
 * TextProcessModifier
 * Model for a modifier allowing to set entities or patterns to mask or ignore.
 *
 * Exactly one of 'entity' or 'pattern' must be provided.
 */
export type TextProcessModifier = {
    /**
     * Action
     */
    action: 'ignore' | 'word-mask' | 'string-mask';
    /**
     * Entity
     * Entity name to mask or ignore
     */
    entity?: string | null;
    /**
     * Pattern
     * Regex pattern to mask or ignore
     */
    pattern?: string | null;
    /**
     * Type
     * Label to use for the mask modifier. If not provided, defaults to "CUSTOM".
     */
    type?: string | null;
};

/**
 * TextUnmaskRequest
 * Request for unmasking previously masked text.
 *
 * When used with a session-based endpoint, the original values will be retrieved
 * from the session. For ephemeral operations, provide the entities mapping.
 */
export type TextUnmaskRequest = {
    /**
     * Text
     * List of masked text strings to unmask
     */
    text: Array<string>;
    /**
     * Entities
     * Optional list of entities to use for unmasking. If not provided, session context will be used. Required for ephemeral operations.
     */
    entities?: Array<UnmaskPiiEntity> | null;
};

/**
 * TextUnmaskResponse
 * Response from a text unmasking operation.
 *
 * Contains the unmasked text strings with original values restored in place of masked tokens.
 */
export type TextUnmaskResponse = {
    /**
     * Text
     * List of unmasked text strings
     */
    text: Array<string>;
    /**
     * Pii
     * List of PII entities used for unmasking. Omitted if quiet=true was specified in the request.
     */
    pii?: Array<UnmaskPiiEntity> | null;
};

/**
 * UnmaskPiiEntity
 * Information about a PII entity to unmask.
 */
export type UnmaskPiiEntity = {
    /**
     * Text
     * Original text of the PII entity
     */
    text: string;
    /**
     * Label
     * Label used for masking the entity (e.g., PERSON_1, EMAIL_2)
     */
    label: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CacheHealthCheckHealthCacheGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/cache';
};

export type CacheHealthCheckHealthCacheGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateSessionSessionsPostData = {
    body: SessionCreate;
    path?: never;
    query?: never;
    url: '/sessions';
};

export type CreateSessionSessionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSessionSessionsPostError = CreateSessionSessionsPostErrors[keyof CreateSessionSessionsPostErrors];

export type CreateSessionSessionsPostResponses = {
    /**
     * Successful Response
     */
    201: Session;
};

export type CreateSessionSessionsPostResponse = CreateSessionSessionsPostResponses[keyof CreateSessionSessionsPostResponses];

export type DeleteSessionSessionsSessionIdDeleteData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/sessions/{session_id}';
};

export type DeleteSessionSessionsSessionIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSessionSessionsSessionIdDeleteError = DeleteSessionSessionsSessionIdDeleteErrors[keyof DeleteSessionSessionsSessionIdDeleteErrors];

export type DeleteSessionSessionsSessionIdDeleteResponses = {
    /**
     * Response Delete Session Sessions  Session Id  Delete
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteSessionSessionsSessionIdDeleteResponse = DeleteSessionSessionsSessionIdDeleteResponses[keyof DeleteSessionSessionsSessionIdDeleteResponses];

export type GetSessionSessionsSessionIdGetData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/sessions/{session_id}';
};

export type GetSessionSessionsSessionIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSessionSessionsSessionIdGetError = GetSessionSessionsSessionIdGetErrors[keyof GetSessionSessionsSessionIdGetErrors];

export type GetSessionSessionsSessionIdGetResponses = {
    /**
     * Successful Response
     */
    200: Session;
};

export type GetSessionSessionsSessionIdGetResponse = GetSessionSessionsSessionIdGetResponses[keyof GetSessionSessionsSessionIdGetResponses];

export type MaskTextTextMaskPostData = {
    body: TextMaskRequest;
    path?: never;
    query?: {
        /**
         * Create Session
         * If true, creates a new session for subsequent operations
         */
        create_session?: boolean;
        /**
         * Quiet
         * If true, omits PII details from response for reduced verbosity
         */
        quiet?: boolean;
    };
    url: '/text/mask';
};

export type MaskTextTextMaskPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MaskTextTextMaskPostError = MaskTextTextMaskPostErrors[keyof MaskTextTextMaskPostErrors];

export type MaskTextTextMaskPostResponses = {
    /**
     * Successful Response
     */
    200: TextMaskResponse;
};

export type MaskTextTextMaskPostResponse = MaskTextTextMaskPostResponses[keyof MaskTextTextMaskPostResponses];

export type UnmaskTextTextUnmaskPostData = {
    body: TextUnmaskRequest;
    path?: never;
    query?: {
        /**
         * Quiet
         * If true, omits PII details from response for reduced verbosity
         */
        quiet?: boolean;
    };
    url: '/text/unmask';
};

export type UnmaskTextTextUnmaskPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnmaskTextTextUnmaskPostError = UnmaskTextTextUnmaskPostErrors[keyof UnmaskTextTextUnmaskPostErrors];

export type UnmaskTextTextUnmaskPostResponses = {
    /**
     * Successful Response
     */
    200: TextUnmaskResponse;
};

export type UnmaskTextTextUnmaskPostResponse = UnmaskTextTextUnmaskPostResponses[keyof UnmaskTextTextUnmaskPostResponses];

export type MaskUpdateTextMaskUpdatePostData = {
    body: MaskUpdateRequest;
    path?: never;
    query?: {
        /**
         * Quiet
         * If true, omits PII details from response for reduced verbosity
         */
        quiet?: boolean;
    };
    url: '/text/mask-update';
};

export type MaskUpdateTextMaskUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MaskUpdateTextMaskUpdatePostError = MaskUpdateTextMaskUpdatePostErrors[keyof MaskUpdateTextMaskUpdatePostErrors];

export type MaskUpdateTextMaskUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: MaskUpdateResponse;
};

export type MaskUpdateTextMaskUpdatePostResponse = MaskUpdateTextMaskUpdatePostResponses[keyof MaskUpdateTextMaskUpdatePostResponses];

export type MaskFileFileMaskPostData = {
    body: FileMaskRequest;
    path?: never;
    query?: {
        /**
         * Create Session
         * If true, creates a new session for subsequent operations
         */
        create_session?: boolean;
    };
    url: '/file/mask';
};

export type MaskFileFileMaskPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MaskFileFileMaskPostError = MaskFileFileMaskPostErrors[keyof MaskFileFileMaskPostErrors];

export type MaskFileFileMaskPostResponses = {
    /**
     * Successful Response
     */
    200: AsyncBinaryResponse;
};

export type MaskFileFileMaskPostResponse = MaskFileFileMaskPostResponses[keyof MaskFileFileMaskPostResponses];

export type GetTaskProgressFileMaskTaskTaskIdGetData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: string;
    };
    query?: {
        /**
         * Quiet
         * If true, omits PII details from response for reduced verbosity
         */
        quiet?: boolean;
    };
    url: '/file/mask/task/{task_id}';
};

export type GetTaskProgressFileMaskTaskTaskIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaskProgressFileMaskTaskTaskIdGetError = GetTaskProgressFileMaskTaskTaskIdGetErrors[keyof GetTaskProgressFileMaskTaskTaskIdGetErrors];

export type GetTaskProgressFileMaskTaskTaskIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiTaskProgressResponse;
};

export type GetTaskProgressFileMaskTaskTaskIdGetResponse = GetTaskProgressFileMaskTaskTaskIdGetResponses[keyof GetTaskProgressFileMaskTaskTaskIdGetResponses];

export type MaskTextWithSessionSessionsSessionIdTextMaskPostData = {
    body: TextMaskRequest;
    path: {
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: {
        /**
         * Quiet
         * If true, omits PII details from response for reduced verbosity
         */
        quiet?: boolean;
    };
    url: '/sessions/{session_id}/text/mask';
};

export type MaskTextWithSessionSessionsSessionIdTextMaskPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MaskTextWithSessionSessionsSessionIdTextMaskPostError = MaskTextWithSessionSessionsSessionIdTextMaskPostErrors[keyof MaskTextWithSessionSessionsSessionIdTextMaskPostErrors];

export type MaskTextWithSessionSessionsSessionIdTextMaskPostResponses = {
    /**
     * Successful Response
     */
    200: TextMaskResponse;
};

export type MaskTextWithSessionSessionsSessionIdTextMaskPostResponse = MaskTextWithSessionSessionsSessionIdTextMaskPostResponses[keyof MaskTextWithSessionSessionsSessionIdTextMaskPostResponses];

export type UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostData = {
    body: TextUnmaskRequest;
    path: {
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: {
        /**
         * Quiet
         * If true, omits PII details from response for reduced verbosity
         */
        quiet?: boolean;
    };
    url: '/sessions/{session_id}/text/unmask';
};

export type UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostError = UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostErrors[keyof UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostErrors];

export type UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostResponses = {
    /**
     * Successful Response
     */
    200: TextUnmaskResponse;
};

export type UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostResponse = UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostResponses[keyof UnmaskTextWithSessionSessionsSessionIdTextUnmaskPostResponses];

export type MaskFileWithSessionSessionsSessionIdFileMaskPostData = {
    body: FileMaskRequest;
    path: {
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: {
        /**
         * Quiet
         * If true, omits PII details from response for reduced verbosity
         */
        quiet?: boolean;
    };
    url: '/sessions/{session_id}/file/mask';
};

export type MaskFileWithSessionSessionsSessionIdFileMaskPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MaskFileWithSessionSessionsSessionIdFileMaskPostError = MaskFileWithSessionSessionsSessionIdFileMaskPostErrors[keyof MaskFileWithSessionSessionsSessionIdFileMaskPostErrors];

export type MaskFileWithSessionSessionsSessionIdFileMaskPostResponses = {
    /**
     * Successful Response
     */
    200: FileMaskResponse;
};

export type MaskFileWithSessionSessionsSessionIdFileMaskPostResponse = MaskFileWithSessionSessionsSessionIdFileMaskPostResponses[keyof MaskFileWithSessionSessionsSessionIdFileMaskPostResponses];

export type RedocHtmlRedocGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/redoc';
};

export type RedocHtmlRedocGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DocsHtmlDocsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docs';
};

export type DocsHtmlDocsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}/latest` | (string & {});
};